namespace NXOpen.Utilities
{
    using System;
    using System.Runtime.InteropServices;
    using System.Security.Cryptography;

    public class Decryptor
    {
        public const string ALLIANCE = "2 ";
        public const string BOTH = "4 ";
        protected static DSAParameters dsaParms;
        public const int FORMAT_VERSION = 1;
        private static byte[] G = new byte[] { 
            0x18, 200, 0x74, 0xac, 140, 0x41, 0x69, 3, 0xdf, 0x83, 0x3d, 0xda, 0x11, 0x86, 6, 0x33, 
            0x12, 0x70, 120, 0x23, 0x5f, 0x9e, 0xcd, 0x7f, 0x4f, 0x57, 0xc6, 0x42, 0xc2, 0xf9, 0xe0, 6, 
            0x49, 0x34, 0x87, 0x94, 0x99, 0xac, 0x1a, 0x4b, 240, 0xd3, 0x7a, 0xcc, 0x99, 0x20, 120, 0x4f, 
            0x70, 0xed, 0xa1, 0x45, 80, 0x3d, 0x83, 40, 0xbd, 0xf2, 0xfd, 0x89, 230, 0x31, 0x8b, 0x83, 
            0x24, 0xf2, 0x83, 0xa4, 0xa8, 0x85, 0xd0, 230, 0x3e, 0xe4, 0x4a, 0xf3, 160, 0xcd, 0xf7, 0x62, 
            0x8b, 140, 0xc9, 0x38, 140, 140, 0x3f, 0xd4, 0xd0, 0x29, 230, 0x7c, 12, 0xab, 0x53, 7, 
            0x77, 7, 0x26, 0x92, 0x58, 0xd3, 0x40, 0x55, 0x33, 0x2c, 0x22, 9, 0xe9, 0x5d, 0x30, 0xac, 
            0xed, 0x4a, 190, 0xd0, 210, 0x6c, 0x66, 0xa7, 0xdb, 0xd6, 0x57, 5, 0xdb, 0x41, 0x4b, 0x86
         };
        public const string HASH_ALGORITHM = "SHA1";
        private static byte[] J = new byte[] { 
            0, 0, 0, 1, 2, 0, 0x51, 14, 0x24, 0x7d, 14, 180, 0x2d, 0x16, 0x41, 0x44, 
            0x3d, 0x8b, 0x9a, 0xca, 0x6c, 0x6d, 3, 0x52, 0x4e, 0xdf, 0xeb, 0xf7, 0x97, 0x8a, 0xe8, 0x20, 
            4, 0x62, 0xea, 0xfc, 50, 0x4d, 0x2d, 0xf1, 0xad, 0x23, 0x27, 0x23, 0xca, 0x5f, 160, 0xde, 
            0x48, 100, 0x9d, 0x1c, 0xeb, 0xae, 0xa1, 0x61, 0x7f, 1, 0xaf, 0x61, 0x9d, 160, 0xeb, 0xa4, 
            0x87, 0xff, 0xdd, 0xeb, 0x4c, 0xdf, 0xfc, 0xf5, 0xfd, 0xe8, 160, 240, 0xa1, 0x27, 0xd4, 0xa9, 
            1, 0x9b, 0xb6, 0x3d, 0x3f, 0x12, 0xdf, 0, 0x6c, 130, 0x33, 0xb3, 30, 0x17, 0xe4, 0x65, 
            3, 0x8d, 0x5f, 0xee, 0xe3, 0x92, 0x2a, 0x48, 0x86, 0xc4, 0xef, 0xfc, 0x92, 0xfb, 0x2a, 250
         };
        public const string NORMAL = "1 ";
        private static byte[] P = new byte[] { 
            200, 0xfd, 0x66, 0x45, 0xb9, 0x7e, 3, 220, 0xf5, 0x4d, 0xdf, 13, 0x74, 0xd3, 90, 0x54, 
            0x25, 0x8b, 20, 0x87, 0x73, 0x95, 0xc3, 0xe2, 2, 0xa8, 0x8b, 40, 0xbd, 0x26, 0xb2, 0x4c, 
            0x6f, 0x88, 0x2c, 4, 0xc5, 0x2a, 170, 0x91, 0x11, 0xb2, 0xf1, 250, 0xe8, 0x7c, 0x8a, 0x6b, 
            0xd0, 0xac, 0x20, 0xde, 0xc2, 0x23, 30, 0x60, 1, 0xf5, 0x6c, 0x94, 0x59, 170, 0xe8, 0x18, 
            0xe7, 0x6b, 0x27, 0x91, 0x9d, 160, 0x42, 0xe8, 0x7c, 0xf6, 0x65, 0x70, 190, 0xda, 0x60, 0xa5, 
            0, 0x9e, 8, 0xeb, 8, 0xd8, 0x90, 0xe8, 0xb1, 0xb0, 0xfc, 0x87, 13, 0x37, 0xae, 0xf2, 
            0x8a, 0xc4, 8, 0xc4, 0xac, 0x12, 1, 30, 0x54, 0xae, 0xf7, 0xce, 13, 130, 0xfb, 0xf9, 
            20, 0xec, 0x10, 0x72, 0x9f, 0x18, 0x2c, 0x48, 0x8a, 0xae, 0xa9, 3, 0xdf, 0xa5, 0xa3, 0x87
         };
        private static byte[] Q = new byte[] { 
            0xc7, 110, 0x4a, 0x8b, 0xb8, 2, 0xc6, 0xa8, 0x42, 0xec, 0xe5, 0xdb, 0xcb, 0xa4, 0x76, 0xc1, 
            0x43, 0xe5, 0xa8, 0x3f
         };
        private static byte[] Seed = new byte[] { 
            0x7b, 0xc5, 0x6a, 0xf6, 0x22, 0xff, 0x81, 0x16, 60, 0x3d, 220, 0xa2, 0x26, 0xd3, 0xf9, 0x84, 
            0x5c, 0x8d, 0xd9, 0x6f
         };
        public const string SNAP = "3 ";
        private static byte[] Y = new byte[] { 
            0x6c, 0x6b, 0x4d, 0x33, 0x2c, 0x24, 15, 0x72, 0x94, 0xa4, 0xf9, 0xde, 0xae, 20, 0xce, 0x93, 
            0x27, 0x22, 0x34, 0x9c, 0xb8, 0x92, 0x34, 0x6d, 0x3f, 80, 0xbf, 0xed, 0x68, 0x2b, 0x6d, 0x25, 
            0xf8, 0x53, 0xc0, 0x3e, 0x4e, 0x40, 0x38, 0x55, 100, 0x2a, 0x6d, 0xe0, 0xd1, 0xab, 0x4c, 0xfd, 
            0x59, 0x2e, 0x7e, 0x52, 0x9c, 4, 0x45, 0x4f, 0xfc, 0x5e, 0x7f, 0xe9, 0xe2, 0xe2, 11, 0x22, 
            0x77, 0x16, 0xcf, 0xd1, 0x53, 0xd0, 0xb3, 0x48, 0xee, 0xf3, 0x51, 0x2c, 9, 0xbd, 0xfd, 0x7d, 
            0xa7, 100, 0xb7, 0x94, 8, 0xdf, 0x75, 0x93, 110, 0xab, 0xe9, 0xd5, 0x1b, 0x4e, 0x57, 0xe5, 
            0x69, 12, 0x3f, 0x51, 0xc1, 0xc9, 0x55, 0x79, 230, 0x71, 0x15, 0x22, 0x55, 0x97, 0x95, 0xa9, 
            0xf4, 0x88, 0xdd, 0xac, 160, 220, 0x8d, 0xeb, 0xa4, 0x2f, 7, 0x7a, 0x90, 0x86, 0xe5, 0x5e
         };

        static Decryptor()
        {
            dsaParms.Counter = 0x1a;
            dsaParms.G = G;
            dsaParms.J = J;
            dsaParms.P = P;
            dsaParms.Q = Q;
            dsaParms.Seed = Seed;
            dsaParms.X = null;
            dsaParms.Y = Y;
        }

        [DllImport("libjam", CallingConvention=CallingConvention.Cdecl)]
        private static extern int JAM_dotnet_verification_use_machine_keys();
        public static bool verifySignature(byte[] hashValue, byte[] signature)
        {
            if (JAM_dotnet_verification_use_machine_keys() == 0)
            {
                DSACryptoServiceProvider.UseMachineKeyStore = true;
            }
            else
            {
                DSACryptoServiceProvider.UseMachineKeyStore = false;
            }
            DSACryptoServiceProvider key = new DSACryptoServiceProvider();
            key.ImportParameters(dsaParms);
            DSASignatureDeformatter deformatter = new DSASignatureDeformatter(key);
            deformatter.SetHashAlgorithm("SHA1");
            return deformatter.VerifySignature(hashValue, signature);
        }
    }
}

