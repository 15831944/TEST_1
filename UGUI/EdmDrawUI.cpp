//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  F:\PHEactProject\Source\Project\UGUI\EdmDrawUI.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: PENGHUI
//              Version: NX 9
//              Date: 12-04-2018  (Format: mm-dd-yyyy)
//              Time: 17:44 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//==============================================================================

//These includes are needed for the following template code
#include "EdmDrawUI.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

Session *(EdmDrawUI::theSession) = NULL;
UI *(EdmDrawUI::theUI) = NULL;
EdmDrawUI::EdmDrawUI()
{
    try
    {
        EdmDrawUI::theSession = NXOpen::Session::GetSession();
        EdmDrawUI::theUI = UI::GetUI();
        theDlxFileName = "EdmDrawUI.dlx";
        theDialog = EdmDrawUI::theUI->CreateDialog(theDlxFileName);
        theDialog->AddOkHandler(make_callback(this, &EdmDrawUI::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &EdmDrawUI::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &EdmDrawUI::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &EdmDrawUI::dialogShown_cb));
    }
    catch(exception& ex)
    {
        throw;
    }
}

EdmDrawUI::~EdmDrawUI()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
{
    EdmDrawUI *theEdmDrawUI = NULL;
    try
    {
        theEdmDrawUI = new EdmDrawUI();
        theEdmDrawUI->Show();
    }
    catch(exception& ex)
    {
        EdmDrawUI::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(theEdmDrawUI != NULL)
    {
        delete theEdmDrawUI;
        theEdmDrawUI = NULL;
    }
}

extern "C" DllExport int ufusr_ask_unload()
{
    //return (int)Session::LibraryUnloadOptionExplicitly;
    return (int)Session::LibraryUnloadOptionImmediately;
    //return (int)Session::LibraryUnloadOptionAtTermination;
}

extern "C" DllExport void ufusr_cleanup(void)
{
    try
    {
    }
    catch(exception& ex)
    {
        EdmDrawUI::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

int EdmDrawUI::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        EdmDrawUI::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}


//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void EdmDrawUI::initialize_cb()
{
    try
    {
        selectTemplate0 = theDialog->TopBlock()->FindBlock("selectTemplate0");
        group5 = theDialog->TopBlock()->FindBlock("group5");
        selectSteel = theDialog->TopBlock()->FindBlock("selectSteel");
        selectCuprum = theDialog->TopBlock()->FindBlock("selectCuprum");
        txtDrfLayer = theDialog->TopBlock()->FindBlock("txtDrfLayer");
        txtDrfEndLayer = theDialog->TopBlock()->FindBlock("txtDrfEndLayer");
        group1 = theDialog->TopBlock()->FindBlock("group1");
        integer03 = theDialog->TopBlock()->FindBlock("integer03");
        integer04 = theDialog->TopBlock()->FindBlock("integer04");
        string0 = theDialog->TopBlock()->FindBlock("string0");
        group2 = theDialog->TopBlock()->FindBlock("group2");
        enum02 = theDialog->TopBlock()->FindBlock("enum02");
        group3 = theDialog->TopBlock()->FindBlock("group3");
        toggle01 = theDialog->TopBlock()->FindBlock("toggle01");
        toggle02 = theDialog->TopBlock()->FindBlock("toggle02");
        toggle03 = theDialog->TopBlock()->FindBlock("toggle03");
    }
    catch(exception& ex)
    {
        EdmDrawUI::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//------------------------------------------------------------------------------
void EdmDrawUI::dialogShown_cb()
{
    try
    {
    }
    catch(exception& ex)
    {
        EdmDrawUI::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int EdmDrawUI::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if(block == selectTemplate0)
        {
        }
        else if(block == selectSteel)
        {
        }
        else if(block == selectCuprum)
        {
        }
        else if(block == txtDrfLayer)
        {
        }
        else if(block == txtDrfEndLayer)
        {
        }
        else if(block == integer03)
        {
        }
        else if(block == integer04)
        {
        }
        else if(block == string0)
        {
        }
        else if(block == enum02)
        {
        }
        else if(block == toggle01)
        {
        }
        else if(block == toggle02)
        {
        }
        else if(block == toggle03)
        {
        }
    }
    catch(exception& ex)
    {
        EdmDrawUI::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int EdmDrawUI::ok_cb()
{
    int errorCode = 0;
    try
    {
    }
    catch(exception& ex)
    {
        errorCode = 1;
        EdmDrawUI::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
PropertyList* EdmDrawUI::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}
