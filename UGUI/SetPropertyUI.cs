//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  F:\PHEactProject\Source\Project\UGUI\SetPropertyUI.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: PENGHUI
//              Version: NX 9
//              Date: 08-01-2018  (Format: mm-dd-yyyy)
//              Time: 13:32 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class SetPropertyUI
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    private string theDlxFileName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.Group group;// Block type: Group
    private NXOpen.BlockStyler.SelectObject selectCuprum;// Block type: Selection
    private NXOpen.BlockStyler.StringBlock strElecName;// Block type: String
    private NXOpen.BlockStyler.StringBlock strElecSize;// Block type: String
    private NXOpen.BlockStyler.StringBlock strElecCuttingSize;// Block type: String
    private NXOpen.BlockStyler.Group group1;// Block type: Group
    private NXOpen.BlockStyler.ScrolledWindow scrolledWindow;// Block type: Scrolled Window
    private NXOpen.BlockStyler.IntegerBlock txtFINISHNUMBER;// Block type: Integer
    private NXOpen.BlockStyler.IntegerBlock txtMIDDLENUMBER;// Block type: Integer
    private NXOpen.BlockStyler.IntegerBlock txtROUGHNUMBER;// Block type: Integer
    private NXOpen.BlockStyler.Enumeration cboxMATNAME;// Block type: Enumeration
    private NXOpen.BlockStyler.Enumeration cbbProdirection;// Block type: Enumeration
    private NXOpen.BlockStyler.ScrolledWindow scrolledWindow1;// Block type: Scrolled Window
    private NXOpen.BlockStyler.DoubleBlock txtFINISHSPACE;// Block type: Double
    private NXOpen.BlockStyler.DoubleBlock txtMIDDLESPACE;// Block type: Double
    private NXOpen.BlockStyler.DoubleBlock txtROUGHSPACE;// Block type: Double
    private NXOpen.BlockStyler.Enumeration cbbElecType;// Block type: Enumeration
    private NXOpen.BlockStyler.Enumeration cbbRock;// Block type: Enumeration
    private NXOpen.BlockStyler.ScrolledWindow scrolledWindow11;// Block type: Scrolled Window
    private NXOpen.BlockStyler.Enumeration cbbFSmoth;// Block type: Enumeration
    private NXOpen.BlockStyler.Enumeration cbbMSmoth;// Block type: Enumeration
    private NXOpen.BlockStyler.Enumeration cbbRSmoth;// Block type: Enumeration
    private NXOpen.BlockStyler.Enumeration cbbChuckType;// Block type: Enumeration
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesEnabled
    //------------------------------------------------------------------------------
    public static readonly int              SnapPointTypesEnabled_UserDefined = (1 << 0);
    public static readonly int                 SnapPointTypesEnabled_Inferred = (1 << 1);
    public static readonly int           SnapPointTypesEnabled_ScreenPosition = (1 << 2);
    public static readonly int                 SnapPointTypesEnabled_EndPoint = (1 << 3);
    public static readonly int                 SnapPointTypesEnabled_MidPoint = (1 << 4);
    public static readonly int             SnapPointTypesEnabled_ControlPoint = (1 << 5);
    public static readonly int             SnapPointTypesEnabled_Intersection = (1 << 6);
    public static readonly int                SnapPointTypesEnabled_ArcCenter = (1 << 7);
    public static readonly int            SnapPointTypesEnabled_QuadrantPoint = (1 << 8);
    public static readonly int            SnapPointTypesEnabled_ExistingPoint = (1 << 9);
    public static readonly int             SnapPointTypesEnabled_PointonCurve = (1 <<10);
    public static readonly int           SnapPointTypesEnabled_PointonSurface = (1 <<11);
    public static readonly int         SnapPointTypesEnabled_PointConstructor = (1 <<12);
    public static readonly int     SnapPointTypesEnabled_TwocurveIntersection = (1 <<13);
    public static readonly int             SnapPointTypesEnabled_TangentPoint = (1 <<14);
    public static readonly int                    SnapPointTypesEnabled_Poles = (1 <<15);
    public static readonly int         SnapPointTypesEnabled_BoundedGridPoint = (1 <<16);
    public static readonly int         SnapPointTypesEnabled_FacetVertexPoint = (1 <<17);
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesOnByDefault
    //------------------------------------------------------------------------------
    public static readonly int             SnapPointTypesOnByDefault_EndPoint = (1 << 3);
    public static readonly int             SnapPointTypesOnByDefault_MidPoint = (1 << 4);
    public static readonly int         SnapPointTypesOnByDefault_ControlPoint = (1 << 5);
    public static readonly int         SnapPointTypesOnByDefault_Intersection = (1 << 6);
    public static readonly int            SnapPointTypesOnByDefault_ArcCenter = (1 << 7);
    public static readonly int        SnapPointTypesOnByDefault_QuadrantPoint = (1 << 8);
    public static readonly int        SnapPointTypesOnByDefault_ExistingPoint = (1 << 9);
    public static readonly int         SnapPointTypesOnByDefault_PointonCurve = (1 <<10);
    public static readonly int       SnapPointTypesOnByDefault_PointonSurface = (1 <<11);
    public static readonly int     SnapPointTypesOnByDefault_PointConstructor = (1 <<12);
    public static readonly int     SnapPointTypesOnByDefault_BoundedGridPoint = (1 <<16);
    
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public SetPropertyUI()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDlxFileName = "SetPropertyUI.dlx";
            theDialog = theUI.CreateDialog(theDlxFileName);
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        2) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //------------------------------------------------------------------------------
    public static void Main()
    {
        SetPropertyUI theSetPropertyUI = null;
        try
        {
            theSetPropertyUI = new SetPropertyUI();
            // The following method shows the dialog immediately
            theSetPropertyUI.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            if(theSetPropertyUI != null)
                theSetPropertyUI.Dispose();
                theSetPropertyUI = null;
        }
    }
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
     public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static void UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            group = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group");
            selectCuprum = (NXOpen.BlockStyler.SelectObject)theDialog.TopBlock.FindBlock("selectCuprum");
            strElecName = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("strElecName");
            strElecSize = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("strElecSize");
            strElecCuttingSize = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("strElecCuttingSize");
            group1 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group1");
            scrolledWindow = (NXOpen.BlockStyler.ScrolledWindow)theDialog.TopBlock.FindBlock("scrolledWindow");
            txtFINISHNUMBER = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock("txtFINISHNUMBER");
            txtMIDDLENUMBER = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock("txtMIDDLENUMBER");
            txtROUGHNUMBER = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock("txtROUGHNUMBER");
            cboxMATNAME = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("cboxMATNAME");
            cbbProdirection = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("cbbProdirection");
            scrolledWindow1 = (NXOpen.BlockStyler.ScrolledWindow)theDialog.TopBlock.FindBlock("scrolledWindow1");
            txtFINISHSPACE = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("txtFINISHSPACE");
            txtMIDDLESPACE = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("txtMIDDLESPACE");
            txtROUGHSPACE = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("txtROUGHSPACE");
            cbbElecType = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("cbbElecType");
            cbbRock = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("cbbRock");
            scrolledWindow11 = (NXOpen.BlockStyler.ScrolledWindow)theDialog.TopBlock.FindBlock("scrolledWindow11");
            cbbFSmoth = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("cbbFSmoth");
            cbbMSmoth = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("cbbMSmoth");
            cbbRSmoth = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("cbbRSmoth");
            cbbChuckType = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("cbbChuckType");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == selectCuprum)
            {
            //---------Enter your code here-----------
            }
            else if(block == strElecName)
            {
            //---------Enter your code here-----------
            }
            else if(block == strElecSize)
            {
            //---------Enter your code here-----------
            }
            else if(block == strElecCuttingSize)
            {
            //---------Enter your code here-----------
            }
            else if(block == txtFINISHNUMBER)
            {
            //---------Enter your code here-----------
            }
            else if(block == txtMIDDLENUMBER)
            {
            //---------Enter your code here-----------
            }
            else if(block == txtROUGHNUMBER)
            {
            //---------Enter your code here-----------
            }
            else if(block == cboxMATNAME)
            {
            //---------Enter your code here-----------
            }
            else if(block == cbbProdirection)
            {
            //---------Enter your code here-----------
            }
            else if(block == txtFINISHSPACE)
            {
            //---------Enter your code here-----------
            }
            else if(block == txtMIDDLESPACE)
            {
            //---------Enter your code here-----------
            }
            else if(block == txtROUGHSPACE)
            {
            //---------Enter your code here-----------
            }
            else if(block == cbbElecType)
            {
            //---------Enter your code here-----------
            }
            else if(block == cbbRock)
            {
            //---------Enter your code here-----------
            }
            else if(block == cbbFSmoth)
            {
            //---------Enter your code here-----------
            }
            else if(block == cbbMSmoth)
            {
            //---------Enter your code here-----------
            }
            else if(block == cbbRSmoth)
            {
            //---------Enter your code here-----------
            }
            else if(block == cbbChuckType)
            {
            //---------Enter your code here-----------
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist =null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }
    
}
